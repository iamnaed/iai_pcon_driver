#pragma once

#include <cstring>
#include <termios.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <sys/time.h>
#include <fcntl.h>
#include <linux/serial.h>
#include <iostream>
#include <vector>
#include <string>
#include <cstring> // For bzero, strerror
#include <iomanip> // For std::setw, std::setfill


// CRC-16/Modbus table
static const uint8_t auchCRCHi[] = {
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
  0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
  0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
  0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40
};

static const uint8_t auchCRCLo[] = {
  0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
  0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
  0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
  0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
  0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
  0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
  0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
  0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
  0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
  0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
  0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
  0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
  0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
  0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
  0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
  0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
  0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
  0x40
};


// Constants for Timeouts and delays, written in p.35 of the IAI PCON Modbus Protocol Manual
constexpr int NUM_RETRY = 3;
constexpr int MIN_TRANSMIT_DELAY_MS = 5;
constexpr int FAST_MEMORY_IO_MS = 1;
constexpr int ONE_POSITION_DATA_READ_MS = 4;
constexpr int ONE_POSITION_DATA_WRITE_MS = 15;
constexpr int ONE_POSITION_DATA_IO_MS = 18;
constexpr int NINE_POSITION_DATA_READ_MS = 9;
constexpr int NINE_POSITION_DATA_WRITE_MS = 90;
constexpr int NINE_POSITION_DATA_IO_MS = 98;
constexpr int SAFETY_FACTOR_DELAY = 3;

constexpr int ENCODER_PULSE_PER_REV = 8192;
constexpr uint8_t SLAVE_ADDR = 0x01;
constexpr uint16_t REGISTER_START_ADDRESS = 0x9000;
constexpr uint16_t SERVO_TOGGLE_COMMAND = 0x0403;
constexpr uint16_t ALARM_RESET_COMMAND = 0x0407;
constexpr uint16_t GO_HOME_COMMAND = 0x040B;
constexpr int MOTOR_MOVE_RESPONSE_SIZE = 8;


enum FunctionCode {
    READ = 0x03,
    WRITE = 0x05,
    WRITE_DIRECT = 0x06,
    WRITE_MULTIPLE = 0x10
};


constexpr uint16_t DEVICE_STATUS_IS_LOAD_CELL_CALIB = 0x02;
constexpr uint16_t DEVICE_STATUS_IS_LOAD_CELL_CALIB_DONE = 0x04;
constexpr uint16_t DEVICE_STATUS_IS_POSITION_SET = 0x08;
constexpr uint16_t DEVICE_STATUS_IS_HOME_POSE = 0x10;
constexpr uint16_t DEVICE_STATUS_IS_PAUSE = 0x20;
constexpr uint16_t DEVICE_STATUS_BRKL = 0x80;
constexpr uint16_t DEVICE_STATUS_ABS_ERR = 0x100;
constexpr uint16_t DEVICE_STATUS_LIGHT_ERR = 0x200;
constexpr uint16_t DEVICE_STATUS_HEAVY_ERR = 0x400;
constexpr uint16_t DEVICE_STATUS_IS_PRESS_NOT_CONTACTED = 0x800;
constexpr uint16_t DEVICE_STATUS_IS_SERVO_ONN = 0x1000;
constexpr uint16_t DEVICE_STATUS_IS_CONTROLLER_READY = 0x2000;
constexpr uint16_t DEVICE_STATUS_IS_SAFETY_ACTIVATED = 0x4000;
constexpr uint16_t DEVICE_STATUS_IS_EMERGENCY = 0x8000;

struct DeviceStatus{
  bool is_load_cell_calibrated;
  bool is_load_cell_calib_command_done;
  bool is_position_set;
  bool is_home_pose;
  bool is_pause;
  bool is_break;
  bool is_abs_encoder_err;
  bool is_light_err;
  bool is_heavy_err;
  bool is_press_not_contacted;
  bool is_servo_on;
  bool is_controller_ready;
  bool is_safety_activated;
  bool is_emergency;
};


struct PconStatus{
  float current_position; // address 0x9000, 0x9001
  uint16_t current_alarm; // address 0x9002
  uint16_t input_port_status; // address 0x9003
  uint16_t output_port_status; // address 0x9004
  uint16_t device_status_one; // address 0x9005
  uint16_t device_status_two; // address 0x9006
  uint16_t extended_device_status; // address 0x9007
  uint32_t system_status; // address 0x9008, 0x9009
  float current_speed; // address 0x900A, 0x900B
  float current_load; // address 0x900C, 0x900D
  int32_t encoder_difference; // address 0x900E, 0x900F
};


class PconDriver{
    public:
      bool openPort(const std::string& port, int baud);
      void closePort();

      int transmitMessage(const std::vector<uint8_t>& message, std::vector<uint8_t>& response, int response_size);
      bool sendMessage(const std::vector<uint8_t>& message, std::vector<uint8_t>& response, int response_size);
      std::vector<uint8_t> createReadRegisterMessage(int& response_size);
      std::vector<uint8_t> createDisableAlarmMessage();
      std::vector<uint8_t> createResetAlarmMessage();
      std::vector<uint8_t> createServoOnMessage();
      std::vector<uint8_t> createServoOffMessage();
      std::vector<uint8_t> createGoHomeMessage();
      std::vector<uint8_t> createMotorMoveMessage(float pos_mm, float step_pos_mm, float speed_mm_s, float acc_g);

      void parseMessage(const std::vector<uint8_t>& response, PconStatus& status);
      unsigned short calculateCRC(const std::vector<uint8_t>& data, size_t size) const;
      
    private:
      
      void writePort(const std::vector<uint8_t>& data);
      ssize_t readPort(uint8_t* buffer, size_t size);
      int fd;
      int baudRate;

      speed_t calculateBaudRate(int baud);
};